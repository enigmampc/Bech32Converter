{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["regexCache","convert","input","from","to","RegExp","regex","output","matches","match","oldAddress","canonical","bech32","decode","newPrefix","prefix","replace","newAddress","encode","words","error","split","join","message","console","App","useState","setInput","setFrom","setTo","placeholder","JSON","stringify","wallet","valoper","pub","valconspub","err","getPlaceholder","Form","style","display","height","Input","value","padding","flex","onChange","_","toLowerCase","TextArea","margin","resize","width","backgroundColor","color","textAlign","position","left","bottom","Icon","name","href","target","rel","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5188e5f2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Form, TextArea, Input, Icon } from \"semantic-ui-react\";\nimport bech32 from \"bech32\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  const [input, setInput] = useState(\"\");\n  const [from, setFrom] = useState(\"\");\n  const [to, setTo] = useState(\"\");\n\n  const placeholder = getPlaceholder(from);\n  return (\n    <div>\n      <Form style={{ display: \"flex\", height: \"4em\" }}>\n        <Input\n          value={from}\n          placeholder=\"convert from prefix: enigma\"\n          style={{ padding: \"0.4%\", flex: 1 }}\n          onChange={(_, { value }) => setFrom(value.toLowerCase())}\n        />\n        <Input\n          value={to}\n          placeholder=\"convert to prefix: secret\"\n          style={{ padding: \"0.4%\", flex: 1 }}\n          onChange={(_, { value }) => setTo(value.toLowerCase())}\n        />\n      </Form>\n      <Form style={{ display: \"flex\", height: \"calc(100vh - (4em + 1.35em))\" }}>\n        <TextArea\n          onChange={(_, { value }) => setInput(value)}\n          placeholder={placeholder}\n          style={{ margin: \"0.2% 0.4% 0.6% 0.4%\", resize: \"none\" }}\n        />\n        <TextArea\n          value={convert(input, from, to)}\n          placeholder={convert(placeholder, from, to)}\n          style={{ margin: \"0.2% 0.4% 0.6% 0.4%\", resize: \"none\" }}\n        />\n      </Form>\n      <div\n        style={{\n          height: \"1.35em\",\n          width: \"100%\",\n          backgroundColor: \"#e7e7e7\",\n          color: \"black\",\n          textAlign: \"center\",\n          position: \"fixed\",\n          left: 0,\n          bottom: 0,\n        }}\n      >\n        Made with <Icon style={{ color: \"red\" }} name=\"heart\" />\n        by Team Enigma{\" \"}\n        <a\n          href=\"https://github.com/enigmampc/bech32.enigma.co\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ color: \"black\" }}\n        >\n          <Icon name=\"github\" />\n        </a>\n      </div>\n    </div>\n  );\n}\n\nconst regexCache = {};\nfunction convert(input = \"\", from, to) {\n  from = from || \"enigma\";\n  to = to || \"secret\";\n\n  if (!regexCache[from]) {\n    // https://github.com/bitcoin/bips/blob/master/bip-0173.mediawiki#Bech32\n    // The separator is always \"1\".\n    // The data part is at least 6 characters long and only consists of alphanumeric characters excluding \"1\", \"b\", \"i\", and \"o\".\n    regexCache[from] = new RegExp(\n      `${from}(pub|valoper|valoperpub|valcons|valconspub)?1[02-9ac-hj-np-z]{6,}\\\\b`,\n      \"g\"\n    );\n  }\n  const regex = regexCache[from];\n\n  let output = input;\n  const matches = input.match(regex) || [];\n\n  for (const oldAddress of matches) {\n    try {\n      const canonical = bech32.decode(oldAddress, 1023);\n      const newPrefix = canonical.prefix.replace(from, to);\n      const newAddress = bech32.encode(newPrefix, canonical.words, 1023);\n      output = output.replace(new RegExp(oldAddress, \"g\"), newAddress);\n    } catch (error) {\n      output = output\n        .split(oldAddress)\n        .join(\n          `||| ${oldAddress} ||| <-- ERROR CONVERTING THIS ADDRESS: ${error.message}`\n        );\n\n      console.error(error);\n    }\n  }\n\n  return output;\n}\n\nfunction getPlaceholder(from) {\n  from = from || \"enigma\";\n\n  try {\n    return (\n      `Paste any text you want on the left side and it will be shown converted on the right side, for example:\\n` +\n      JSON.stringify(\n        {\n          wallet: bech32.encode(\n            from,\n            bech32.decode(\"enigma1pnsceh64jyrsfwjd2k865eetmsgg5grw8sma87\").words\n          ),\n          valoper: bech32.encode(\n            `${from}valoper`,\n            bech32.decode(\n              \"enigmavaloper1qx5pppsfrqwlnmxj7prpx8rysxm2u5vzqwv3ly\"\n            ).words\n          ),\n          pub: bech32.encode(\n            `${from}pub`,\n            bech32.decode(\n              \"enigmapub1addwnpepqgauy23vhvvr8uezgczuzh7lj64r9ahd4vsshz5fksezk5lw5k6swjskux6\"\n            ).words\n          ),\n          valconspub: bech32.encode(\n            `${from}valconspub`,\n            bech32.decode(\n              \"enigmavalconspub1zcjduepqj7ygd0gulz2qa03hgzf3ye40pmeyen2z64xjvpkw8mfhuu7j2vcqk6lgcu\"\n            ).words\n          ),\n        },\n        null,\n        4\n      )\n    );\n  } catch (err) {\n    return err.message;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}