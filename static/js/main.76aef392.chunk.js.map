{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","input","from","to","placeholder","JSON","stringify","wallet","bech32","encode","decode","words","valoper","pub","valconspub","err","message","getPlaceholder","this","Form","style","display","height","Input","value","padding","flex","onChange","_","setState","TextArea","margin","convert","React","Component","regexCache","RegExp","regex","output","matches","match","oldAddress","canonical","newPrefix","prefix","replace","newAddress","error","split","join","console","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.76aef392.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, TextArea, Input } from \"semantic-ui-react\";\nimport bech32 from \"bech32\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      from: \"\",\n      to: \"\",\n    };\n  }\n\n  render() {\n    const placeholder = getPlaceholder(this.state.from);\n    return (\n      <div>\n        <Form style={{ display: \"flex\", height: \"8vh\" }}>\n          <Input\n            value={this.state.from}\n            placeholder=\"from: enigma\"\n            style={{ padding: \"0.4%\", flex: 1 }}\n            onChange={(_, { value }) => this.setState({ from: value })}\n          />\n          <Input\n            value={this.state.to}\n            placeholder=\"to: secret\"\n            style={{ padding: \"0.4%\", flex: 1 }}\n            onChange={(_, { value }) => this.setState({ to: value })}\n          />\n        </Form>\n        <Form style={{ display: \"flex\", height: \"92vh\" }}>\n          <TextArea\n            onChange={(_, { value }) => this.setState({ input: value })}\n            placeholder={placeholder}\n            style={{ margin: \"0.4%\" }}\n          />\n          <TextArea\n            value={convert(this.state.input, this.state.from, this.state.to)}\n            placeholder={convert(placeholder, this.state.from, this.state.to)}\n            style={{ margin: \"0.4%\" }}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst regexCache = {};\n\nfunction convert(input, from, to) {\n  from = from || \"enigma\";\n  to = to || \"secret\";\n\n  if (!regexCache[from]) {\n    regexCache[from] = new RegExp(\n      `${from}(pub|valoper|valoperpub|valcons|valconspub)?1[a-z0-9]+\\\\b`,\n      \"g\"\n    );\n  }\n  const regex = regexCache[from];\n\n  let output = input;\n  const matches = input.match(regex) || [];\n\n  for (const oldAddress of matches) {\n    try {\n      const canonical = bech32.decode(oldAddress);\n      const newPrefix = canonical.prefix.replace(from, to);\n      const newAddress = bech32.encode(newPrefix, canonical.words);\n      output = output.replace(new RegExp(oldAddress, \"g\"), newAddress);\n    } catch (error) {\n      output = output\n        .split(oldAddress)\n        .join(\n          `||| ${oldAddress} ||| <-- ERROR CONVERTING THIS ADDRESS: ${error.message}`\n        );\n\n      console.error(error);\n    }\n  }\n\n  return output;\n}\n\nfunction getPlaceholder(from) {\n  from = from || \"enigma\";\n\n  try {\n    return JSON.stringify(\n      {\n        wallet: bech32.encode(\n          from,\n          bech32.decode(\"enigma1pnsceh64jyrsfwjd2k865eetmsgg5grw8sma87\").words\n        ),\n        valoper: bech32.encode(\n          `${from}valoper`,\n          bech32.decode(\"enigmavaloper1qx5pppsfrqwlnmxj7prpx8rysxm2u5vzqwv3ly\")\n            .words\n        ),\n        pub: bech32.encode(\n          `${from}pub`,\n          bech32.decode(\n            \"enigmapub1addwnpepqgauy23vhvvr8uezgczuzh7lj64r9ahd4vsshz5fksezk5lw5k6swjskux6\"\n          ).words\n        ),\n        valconspub: bech32.encode(\n          `${from}valconspub`,\n          bech32.decode(\n            \"enigmavalconspub1zcjduepqj7ygd0gulz2qa03hgzf3ye40pmeyen2z64xjvpkw8mfhuu7j2vcqk6lgcu\"\n          ).words\n        ),\n      },\n      null,\n      4\n    );\n  } catch (err) {\n    return err.message;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}