{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","input","from","to","placeholder","this","JSON","stringify","name","type","address","pubkey","Form","style","display","TextArea","onChange","event","data","setState","value","height","convert","React","Component","regexCache","RegExp","regex","output","matches","match","oldAddress","canonical","bech32","decode","newPrefix","prefix","replace","newAddress","encode","words","error","split","join","console","message","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"mVAOMA,G,gEACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,GACPC,KAAM,SACNC,GAAI,UALW,E,qDAST,IA2DYD,EA3Db,OACDE,GA0DcF,EA1DeG,KAAKL,MAAME,KA2DzCI,KAAKC,UACV,CACEC,KAAM,UACNC,KAAM,QACNC,QAAQ,GAAD,OAAKR,EAAL,2CACPS,OAAO,GAAD,OAAKT,EAAL,4EAER,KACA,IAlEA,OACE,6BACE,kBAACU,EAAA,EAAD,CAAMC,MAAO,CAAEC,QAAS,SACtB,kBAACC,EAAA,EAAD,CACEC,SAAU,SAACC,EAAOC,GAChB,EAAKC,SAAS,CAAElB,MAAOiB,EAAKE,SAE9BhB,YAAaA,EACbS,MAAO,CAAEQ,OAAQ,WAEnB,kBAACN,EAAA,EAAD,CACEK,MAAOE,EAAQjB,KAAKL,OACpBI,YAAakB,EAAQ,CACnBrB,MAAOG,EACPF,KAAMG,KAAKL,MAAME,KACjBC,GAAIE,KAAKL,MAAMG,KAEjBU,MAAO,CAAEQ,OAAQ,iB,GA7BXE,IAAMC,YAqClBC,EAAa,GAEnB,SAASH,EAAT,GAAuC,IAApBrB,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,KAAMC,EAAM,EAANA,GACzBsB,EAAWvB,KACduB,EAAWvB,GAAQ,IAAIwB,OAAJ,UACdxB,EADc,6DAEjB,MAGJ,IAPoC,EAO9ByB,EAAQF,EAAWvB,GAErB0B,EAAS3B,EACP4B,EAAU5B,EAAM6B,MAAMH,IAAU,GAVF,cAYXE,GAZW,IAYpC,2BAAkC,CAAC,IAAxBE,EAAuB,QAChC,IACE,IAAMC,EAAYC,IAAOC,OAAOH,GAC1BI,EAAYH,EAAUI,OAAOC,QAAQnC,EAAMC,GAC3CmC,EAAaL,IAAOM,OAAOJ,EAAWH,EAAUQ,OACtDZ,EAASA,EAAOS,QAAQ,IAAIX,OAAOK,EAAY,KAAMO,GACrD,MAAOG,GACPb,EAASA,EACNc,MAAMX,GACNY,KAFM,cAEMZ,EAFN,yCAITa,QAAQH,MAAMA,EAAMI,WAvBY,8BA2BpC,OAAOjB,EAgBM9B,QC7EKgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApB,GACLG,QAAQH,MAAMA,EAAMI,c","file":"static/js/main.1e3bf57f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, TextArea } from \"semantic-ui-react\";\nimport bech32 from \"bech32\";\n\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \"\",\n      from: \"enigma\",\n      to: \"secret\",\n    };\n  }\n\n  render() {\n    const placeholder = getPlaceholder(this.state.from);\n    return (\n      <div>\n        <Form style={{ display: \"flex\" }}>\n          <TextArea\n            onChange={(event, data) => {\n              this.setState({ input: data.value });\n            }}\n            placeholder={placeholder}\n            style={{ height: \"100vh\" }}\n          />\n          <TextArea\n            value={convert(this.state)}\n            placeholder={convert({\n              input: placeholder,\n              from: this.state.from,\n              to: this.state.to,\n            })}\n            style={{ height: \"100vh\" }}\n          />\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst regexCache = {};\n\nfunction convert({ input, from, to }) {\n  if (!regexCache[from]) {\n    regexCache[from] = new RegExp(\n      `${from}(pub|valoper|valoperpub|valcons|valconspub)?1[a-z0-9]+\\\\b`,\n      \"g\"\n    );\n  }\n  const regex = regexCache[from];\n\n  let output = input;\n  const matches = input.match(regex) || [];\n\n  for (const oldAddress of matches) {\n    try {\n      const canonical = bech32.decode(oldAddress);\n      const newPrefix = canonical.prefix.replace(from, to);\n      const newAddress = bech32.encode(newPrefix, canonical.words);\n      output = output.replace(new RegExp(oldAddress, \"g\"), newAddress);\n    } catch (error) {\n      output = output\n        .split(oldAddress)\n        .join(`||| ${oldAddress} ||| <-- ERROR PARSING THIS ADDRESS!`);\n\n      console.error(error.message);\n    }\n  }\n\n  return output;\n}\n\nfunction getPlaceholder(from) {\n  return JSON.stringify(\n    {\n      name: \"example\",\n      type: \"local\",\n      address: `${from}1pnsceh64jyrsfwjd2k865eetmsgg5grw8sma87`,\n      pubkey: `${from}pub1addwnpepqgauy23vhvvr8uezgczuzh7lj64r9ahd4vsshz5fksezk5lw5k6swjskux6`,\n    },\n    null,\n    4\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}